# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from photoprism_client.models.form_details import FormDetails
from typing import Optional, Set
from typing_extensions import Self

class FormPhoto(BaseModel):
    """
    FormPhoto
    """ # noqa: E501
    altitude: Optional[StrictInt] = Field(default=None, alias="Altitude")
    camera_id: Optional[StrictInt] = Field(default=None, alias="CameraID")
    camera_src: Optional[StrictStr] = Field(default=None, alias="CameraSrc")
    cell_accuracy: Optional[StrictInt] = Field(default=None, alias="CellAccuracy")
    cell_id: Optional[StrictStr] = Field(default=None, alias="CellID")
    country: Optional[StrictStr] = Field(default=None, alias="Country")
    day: Optional[StrictInt] = Field(default=None, alias="Day")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    description_src: Optional[StrictStr] = Field(default=None, alias="DescriptionSrc")
    details: Optional[FormDetails] = Field(default=None, alias="Details")
    exposure: Optional[StrictStr] = Field(default=None, alias="Exposure")
    f_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FNumber")
    favorite: Optional[StrictBool] = Field(default=None, alias="Favorite")
    focal_length: Optional[StrictInt] = Field(default=None, alias="FocalLength")
    iso: Optional[StrictInt] = Field(default=None, alias="Iso")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Lat")
    lens_id: Optional[StrictInt] = Field(default=None, alias="LensID")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Lng")
    month: Optional[StrictInt] = Field(default=None, alias="Month")
    original_name: Optional[StrictStr] = Field(default=None, alias="OriginalName")
    panorama: Optional[StrictBool] = Field(default=None, alias="Panorama")
    place_id: Optional[StrictStr] = Field(default=None, alias="PlaceID")
    place_src: Optional[StrictStr] = Field(default=None, alias="PlaceSrc")
    private: Optional[StrictBool] = Field(default=None, alias="Private")
    scan: Optional[StrictBool] = Field(default=None, alias="Scan")
    stack: Optional[StrictInt] = Field(default=None, alias="Stack")
    taken_at: Optional[StrictStr] = Field(default=None, alias="TakenAt")
    taken_at_local: Optional[StrictStr] = Field(default=None, alias="TakenAtLocal")
    taken_src: Optional[StrictStr] = Field(default=None, alias="TakenSrc")
    time_zone: Optional[StrictStr] = Field(default=None, alias="TimeZone")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    title_src: Optional[StrictStr] = Field(default=None, alias="TitleSrc")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    type_src: Optional[StrictStr] = Field(default=None, alias="TypeSrc")
    year: Optional[StrictInt] = Field(default=None, alias="Year")
    __properties: ClassVar[List[str]] = ["Altitude", "CameraID", "CameraSrc", "CellAccuracy", "CellID", "Country", "Day", "Description", "DescriptionSrc", "Details", "Exposure", "FNumber", "Favorite", "FocalLength", "Iso", "Lat", "LensID", "Lng", "Month", "OriginalName", "Panorama", "PlaceID", "PlaceSrc", "Private", "Scan", "Stack", "TakenAt", "TakenAtLocal", "TakenSrc", "TimeZone", "Title", "TitleSrc", "Type", "TypeSrc", "Year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormPhoto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['Details'] = self.details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormPhoto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Altitude": obj.get("Altitude"),
            "CameraID": obj.get("CameraID"),
            "CameraSrc": obj.get("CameraSrc"),
            "CellAccuracy": obj.get("CellAccuracy"),
            "CellID": obj.get("CellID"),
            "Country": obj.get("Country"),
            "Day": obj.get("Day"),
            "Description": obj.get("Description"),
            "DescriptionSrc": obj.get("DescriptionSrc"),
            "Details": FormDetails.from_dict(obj["Details"]) if obj.get("Details") is not None else None,
            "Exposure": obj.get("Exposure"),
            "FNumber": obj.get("FNumber"),
            "Favorite": obj.get("Favorite"),
            "FocalLength": obj.get("FocalLength"),
            "Iso": obj.get("Iso"),
            "Lat": obj.get("Lat"),
            "LensID": obj.get("LensID"),
            "Lng": obj.get("Lng"),
            "Month": obj.get("Month"),
            "OriginalName": obj.get("OriginalName"),
            "Panorama": obj.get("Panorama"),
            "PlaceID": obj.get("PlaceID"),
            "PlaceSrc": obj.get("PlaceSrc"),
            "Private": obj.get("Private"),
            "Scan": obj.get("Scan"),
            "Stack": obj.get("Stack"),
            "TakenAt": obj.get("TakenAt"),
            "TakenAtLocal": obj.get("TakenAtLocal"),
            "TakenSrc": obj.get("TakenSrc"),
            "TimeZone": obj.get("TimeZone"),
            "Title": obj.get("Title"),
            "TitleSrc": obj.get("TitleSrc"),
            "Type": obj.get("Type"),
            "TypeSrc": obj.get("TypeSrc"),
            "Year": obj.get("Year")
        })
        return _obj


