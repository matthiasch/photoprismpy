# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConfigClientCounts(BaseModel):
    """
    ConfigClientCounts
    """ # noqa: E501
    albums: Optional[StrictInt] = None
    all: Optional[StrictInt] = None
    archived: Optional[StrictInt] = None
    cameras: Optional[StrictInt] = None
    countries: Optional[StrictInt] = None
    favorites: Optional[StrictInt] = None
    files: Optional[StrictInt] = None
    folders: Optional[StrictInt] = None
    hidden: Optional[StrictInt] = None
    label_max_photos: Optional[StrictInt] = Field(default=None, alias="labelMaxPhotos")
    labels: Optional[StrictInt] = None
    lenses: Optional[StrictInt] = None
    live: Optional[StrictInt] = None
    moments: Optional[StrictInt] = None
    months: Optional[StrictInt] = None
    people: Optional[StrictInt] = None
    photos: Optional[StrictInt] = None
    places: Optional[StrictInt] = None
    private: Optional[StrictInt] = None
    private_albums: Optional[StrictInt] = None
    private_folders: Optional[StrictInt] = None
    private_moments: Optional[StrictInt] = None
    private_months: Optional[StrictInt] = None
    private_states: Optional[StrictInt] = None
    review: Optional[StrictInt] = None
    states: Optional[StrictInt] = None
    stories: Optional[StrictInt] = None
    videos: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["albums", "all", "archived", "cameras", "countries", "favorites", "files", "folders", "hidden", "labelMaxPhotos", "labels", "lenses", "live", "moments", "months", "people", "photos", "places", "private", "private_albums", "private_folders", "private_moments", "private_months", "private_states", "review", "states", "stories", "videos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigClientCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigClientCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "albums": obj.get("albums"),
            "all": obj.get("all"),
            "archived": obj.get("archived"),
            "cameras": obj.get("cameras"),
            "countries": obj.get("countries"),
            "favorites": obj.get("favorites"),
            "files": obj.get("files"),
            "folders": obj.get("folders"),
            "hidden": obj.get("hidden"),
            "labelMaxPhotos": obj.get("labelMaxPhotos"),
            "labels": obj.get("labels"),
            "lenses": obj.get("lenses"),
            "live": obj.get("live"),
            "moments": obj.get("moments"),
            "months": obj.get("months"),
            "people": obj.get("people"),
            "photos": obj.get("photos"),
            "places": obj.get("places"),
            "private": obj.get("private"),
            "private_albums": obj.get("private_albums"),
            "private_folders": obj.get("private_folders"),
            "private_moments": obj.get("private_moments"),
            "private_months": obj.get("private_months"),
            "private_states": obj.get("private_states"),
            "review": obj.get("review"),
            "states": obj.get("states"),
            "stories": obj.get("stories"),
            "videos": obj.get("videos")
        })
        return _obj


