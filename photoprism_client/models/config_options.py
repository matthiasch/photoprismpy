# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from photoprism_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class ConfigOptions(BaseModel):
    """
    ConfigOptions
    """ # noqa: E501
    app_color: Optional[StrictStr] = Field(default=None, alias="AppColor")
    app_icon: Optional[StrictStr] = Field(default=None, alias="AppIcon")
    app_mode: Optional[StrictStr] = Field(default=None, alias="AppMode")
    app_name: Optional[StrictStr] = Field(default=None, alias="AppName")
    auto_import: Optional[StrictInt] = Field(default=None, alias="AutoImport")
    auto_index: Optional[StrictInt] = Field(default=None, alias="AutoIndex")
    backup_albums: Optional[StrictBool] = Field(default=True, alias="BackupAlbums")
    backup_database: Optional[StrictBool] = Field(default=True, alias="BackupDatabase")
    backup_retain: Optional[StrictInt] = Field(default=None, alias="BackupRetain")
    backup_schedule: Optional[StrictStr] = Field(default=None, alias="BackupSchedule")
    cdn_url: Optional[StrictStr] = Field(default=None, alias="CdnUrl")
    cdn_video: Optional[StrictBool] = Field(default=None, alias="CdnVideo")
    debug: Optional[StrictBool] = Field(default=None, alias="Debug")
    default_locale: Optional[StrictStr] = Field(default=None, alias="DefaultLocale")
    default_tls: Optional[StrictBool] = Field(default=None, alias="DefaultTLS")
    default_theme: Optional[StrictStr] = Field(default=None, alias="DefaultTheme")
    default_timezone: Optional[StrictStr] = Field(default=None, alias="DefaultTimezone")
    detect_nsfw: Optional[StrictBool] = Field(default=None, alias="DetectNSFW")
    disable_backups: Optional[StrictBool] = Field(default=None, alias="DisableBackups")
    disable_classification: Optional[StrictBool] = Field(default=None, alias="DisableClassification")
    disable_darktable: Optional[StrictBool] = Field(default=None, alias="DisableDarktable")
    disable_exif_tool: Optional[StrictBool] = Field(default=None, alias="DisableExifTool")
    disable_f_fmpeg: Optional[StrictBool] = Field(default=None, alias="DisableFFmpeg")
    disable_faces: Optional[StrictBool] = Field(default=None, alias="DisableFaces")
    disable_heif_convert: Optional[StrictBool] = Field(default=None, alias="DisableHeifConvert")
    disable_image_magick: Optional[StrictBool] = Field(default=None, alias="DisableImageMagick")
    disable_jpeg_xl: Optional[StrictBool] = Field(default=None, alias="DisableJpegXL")
    disable_oidc: Optional[StrictBool] = Field(default=None, alias="DisableOIDC")
    disable_places: Optional[StrictBool] = Field(default=None, alias="DisablePlaces")
    disable_raw: Optional[StrictBool] = Field(default=None, alias="DisableRaw")
    disable_raw_therapee: Optional[StrictBool] = Field(default=None, alias="DisableRawTherapee")
    disable_sips: Optional[StrictBool] = Field(default=None, alias="DisableSips")
    disable_tls: Optional[StrictBool] = Field(default=None, alias="DisableTLS")
    disable_tensor_flow: Optional[StrictBool] = Field(default=None, alias="DisableTensorFlow")
    disable_vectors: Optional[StrictBool] = Field(default=None, alias="DisableVectors")
    disable_vips: Optional[StrictBool] = Field(default=None, alias="DisableVips")
    disable_web_dav: Optional[StrictBool] = Field(default=None, alias="DisableWebDAV")
    exif_brute_force: Optional[StrictBool] = Field(default=None, alias="ExifBruteForce")
    experimental: Optional[StrictBool] = Field(default=None, alias="Experimental")
    f_fmpeg_bitrate: Optional[StrictInt] = Field(default=None, alias="FFmpegBitrate")
    f_fmpeg_encoder: Optional[StrictStr] = Field(default=None, alias="FFmpegEncoder")
    f_fmpeg_map_audio: Optional[StrictStr] = Field(default=None, alias="FFmpegMapAudio")
    f_fmpeg_map_video: Optional[StrictStr] = Field(default=None, alias="FFmpegMapVideo")
    f_fmpeg_size: Optional[StrictInt] = Field(default=None, alias="FFmpegSize")
    http_cache_max_age: Optional[StrictInt] = Field(default=None, alias="HttpCacheMaxAge")
    http_cache_public: Optional[StrictBool] = Field(default=None, alias="HttpCachePublic")
    http_video_max_age: Optional[StrictInt] = Field(default=None, alias="HttpVideoMaxAge")
    https_proxy: Optional[StrictStr] = Field(default=None, alias="HttpsProxy")
    https_proxy_insecure: Optional[StrictBool] = Field(default=None, alias="HttpsProxyInsecure")
    index_schedule: Optional[StrictStr] = Field(default=None, alias="IndexSchedule")
    index_workers: Optional[StrictInt] = Field(default=None, alias="IndexWorkers")
    jpeg_quality: Optional[StrictInt] = Field(default=None, alias="JpegQuality")
    jpeg_size: Optional[StrictInt] = Field(default=None, alias="JpegSize")
    legal_info: Optional[StrictStr] = Field(default=None, alias="LegalInfo")
    legal_url: Optional[StrictStr] = Field(default=None, alias="LegalUrl")
    oidc_icon: Optional[StrictStr] = Field(default=None, alias="OIDCIcon")
    oidc_provider: Optional[StrictStr] = Field(default=None, alias="OIDCProvider")
    oidc_redirect: Optional[StrictBool] = Field(default=None, alias="OIDCRedirect")
    oidc_register: Optional[StrictBool] = Field(default=None, alias="OIDCRegister")
    originals_limit: Optional[StrictInt] = Field(default=None, alias="OriginalsLimit")
    png_size: Optional[StrictInt] = Field(default=None, alias="PngSize")
    prod: Optional[StrictBool] = Field(default=None, alias="Prod")
    raw_presets: Optional[StrictBool] = Field(default=None, alias="RawPresets")
    read_only: Optional[StrictBool] = Field(default=None, alias="ReadOnly")
    resolution_limit: Optional[StrictInt] = Field(default=None, alias="ResolutionLimit")
    sidecar_yaml: Optional[StrictBool] = Field(default=True, alias="SidecarYaml")
    site_author: Optional[StrictStr] = Field(default=None, alias="SiteAuthor")
    site_caption: Optional[StrictStr] = Field(default=None, alias="SiteCaption")
    site_description: Optional[StrictStr] = Field(default=None, alias="SiteDescription")
    site_preview: Optional[StrictStr] = Field(default=None, alias="SitePreview")
    site_title: Optional[StrictStr] = Field(default=None, alias="SiteTitle")
    site_url: Optional[StrictStr] = Field(default=None, alias="SiteUrl")
    tls_cert: Optional[StrictStr] = Field(default=None, alias="TLSCert")
    tls_email: Optional[StrictStr] = Field(default=None, alias="TLSEmail")
    tls_key: Optional[StrictStr] = Field(default=None, alias="TLSKey")
    test: Optional[StrictBool] = Field(default=None, alias="Test")
    thumb_color: Optional[StrictStr] = Field(default=None, alias="ThumbColor")
    thumb_filter: Optional[StrictStr] = Field(default=None, alias="ThumbFilter")
    thumb_library: Optional[StrictStr] = Field(default=None, alias="ThumbLibrary")
    thumb_size: Optional[StrictInt] = Field(default=None, alias="ThumbSize")
    thumb_size_uncached: Optional[StrictInt] = Field(default=None, alias="ThumbSizeUncached")
    thumb_uncached: Optional[StrictBool] = Field(default=None, alias="ThumbUncached")
    trace: Optional[StrictBool] = Field(default=None, alias="Trace")
    wakeup_interval: Optional[TimeDuration] = Field(default=None, alias="WakeupInterval")
    wallpaper_uri: Optional[StrictStr] = Field(default=None, alias="WallpaperUri")
    __properties: ClassVar[List[str]] = ["AppColor", "AppIcon", "AppMode", "AppName", "AutoImport", "AutoIndex", "BackupAlbums", "BackupDatabase", "BackupRetain", "BackupSchedule", "CdnUrl", "CdnVideo", "Debug", "DefaultLocale", "DefaultTLS", "DefaultTheme", "DefaultTimezone", "DetectNSFW", "DisableBackups", "DisableClassification", "DisableDarktable", "DisableExifTool", "DisableFFmpeg", "DisableFaces", "DisableHeifConvert", "DisableImageMagick", "DisableJpegXL", "DisableOIDC", "DisablePlaces", "DisableRaw", "DisableRawTherapee", "DisableSips", "DisableTLS", "DisableTensorFlow", "DisableVectors", "DisableVips", "DisableWebDAV", "ExifBruteForce", "Experimental", "FFmpegBitrate", "FFmpegEncoder", "FFmpegMapAudio", "FFmpegMapVideo", "FFmpegSize", "HttpCacheMaxAge", "HttpCachePublic", "HttpVideoMaxAge", "HttpsProxy", "HttpsProxyInsecure", "IndexSchedule", "IndexWorkers", "JpegQuality", "JpegSize", "LegalInfo", "LegalUrl", "OIDCIcon", "OIDCProvider", "OIDCRedirect", "OIDCRegister", "OriginalsLimit", "PngSize", "Prod", "RawPresets", "ReadOnly", "ResolutionLimit", "SidecarYaml", "SiteAuthor", "SiteCaption", "SiteDescription", "SitePreview", "SiteTitle", "SiteUrl", "TLSCert", "TLSEmail", "TLSKey", "Test", "ThumbColor", "ThumbFilter", "ThumbLibrary", "ThumbSize", "ThumbSizeUncached", "ThumbUncached", "Trace", "WakeupInterval", "WallpaperUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AppColor": obj.get("AppColor"),
            "AppIcon": obj.get("AppIcon"),
            "AppMode": obj.get("AppMode"),
            "AppName": obj.get("AppName"),
            "AutoImport": obj.get("AutoImport"),
            "AutoIndex": obj.get("AutoIndex"),
            "BackupAlbums": obj.get("BackupAlbums") if obj.get("BackupAlbums") is not None else True,
            "BackupDatabase": obj.get("BackupDatabase") if obj.get("BackupDatabase") is not None else True,
            "BackupRetain": obj.get("BackupRetain"),
            "BackupSchedule": obj.get("BackupSchedule"),
            "CdnUrl": obj.get("CdnUrl"),
            "CdnVideo": obj.get("CdnVideo"),
            "Debug": obj.get("Debug"),
            "DefaultLocale": obj.get("DefaultLocale"),
            "DefaultTLS": obj.get("DefaultTLS"),
            "DefaultTheme": obj.get("DefaultTheme"),
            "DefaultTimezone": obj.get("DefaultTimezone"),
            "DetectNSFW": obj.get("DetectNSFW"),
            "DisableBackups": obj.get("DisableBackups"),
            "DisableClassification": obj.get("DisableClassification"),
            "DisableDarktable": obj.get("DisableDarktable"),
            "DisableExifTool": obj.get("DisableExifTool"),
            "DisableFFmpeg": obj.get("DisableFFmpeg"),
            "DisableFaces": obj.get("DisableFaces"),
            "DisableHeifConvert": obj.get("DisableHeifConvert"),
            "DisableImageMagick": obj.get("DisableImageMagick"),
            "DisableJpegXL": obj.get("DisableJpegXL"),
            "DisableOIDC": obj.get("DisableOIDC"),
            "DisablePlaces": obj.get("DisablePlaces"),
            "DisableRaw": obj.get("DisableRaw"),
            "DisableRawTherapee": obj.get("DisableRawTherapee"),
            "DisableSips": obj.get("DisableSips"),
            "DisableTLS": obj.get("DisableTLS"),
            "DisableTensorFlow": obj.get("DisableTensorFlow"),
            "DisableVectors": obj.get("DisableVectors"),
            "DisableVips": obj.get("DisableVips"),
            "DisableWebDAV": obj.get("DisableWebDAV"),
            "ExifBruteForce": obj.get("ExifBruteForce"),
            "Experimental": obj.get("Experimental"),
            "FFmpegBitrate": obj.get("FFmpegBitrate"),
            "FFmpegEncoder": obj.get("FFmpegEncoder"),
            "FFmpegMapAudio": obj.get("FFmpegMapAudio"),
            "FFmpegMapVideo": obj.get("FFmpegMapVideo"),
            "FFmpegSize": obj.get("FFmpegSize"),
            "HttpCacheMaxAge": obj.get("HttpCacheMaxAge"),
            "HttpCachePublic": obj.get("HttpCachePublic"),
            "HttpVideoMaxAge": obj.get("HttpVideoMaxAge"),
            "HttpsProxy": obj.get("HttpsProxy"),
            "HttpsProxyInsecure": obj.get("HttpsProxyInsecure"),
            "IndexSchedule": obj.get("IndexSchedule"),
            "IndexWorkers": obj.get("IndexWorkers"),
            "JpegQuality": obj.get("JpegQuality"),
            "JpegSize": obj.get("JpegSize"),
            "LegalInfo": obj.get("LegalInfo"),
            "LegalUrl": obj.get("LegalUrl"),
            "OIDCIcon": obj.get("OIDCIcon"),
            "OIDCProvider": obj.get("OIDCProvider"),
            "OIDCRedirect": obj.get("OIDCRedirect"),
            "OIDCRegister": obj.get("OIDCRegister"),
            "OriginalsLimit": obj.get("OriginalsLimit"),
            "PngSize": obj.get("PngSize"),
            "Prod": obj.get("Prod"),
            "RawPresets": obj.get("RawPresets"),
            "ReadOnly": obj.get("ReadOnly"),
            "ResolutionLimit": obj.get("ResolutionLimit"),
            "SidecarYaml": obj.get("SidecarYaml") if obj.get("SidecarYaml") is not None else True,
            "SiteAuthor": obj.get("SiteAuthor"),
            "SiteCaption": obj.get("SiteCaption"),
            "SiteDescription": obj.get("SiteDescription"),
            "SitePreview": obj.get("SitePreview"),
            "SiteTitle": obj.get("SiteTitle"),
            "SiteUrl": obj.get("SiteUrl"),
            "TLSCert": obj.get("TLSCert"),
            "TLSEmail": obj.get("TLSEmail"),
            "TLSKey": obj.get("TLSKey"),
            "Test": obj.get("Test"),
            "ThumbColor": obj.get("ThumbColor"),
            "ThumbFilter": obj.get("ThumbFilter"),
            "ThumbLibrary": obj.get("ThumbLibrary"),
            "ThumbSize": obj.get("ThumbSize"),
            "ThumbSizeUncached": obj.get("ThumbSizeUncached"),
            "ThumbUncached": obj.get("ThumbUncached"),
            "Trace": obj.get("Trace"),
            "WakeupInterval": obj.get("WakeupInterval"),
            "WallpaperUri": obj.get("WallpaperUri")
        })
        return _obj


