# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FormMarker(BaseModel):
    """
    FormMarker
    """ # noqa: E501
    file_uid: Optional[StrictStr] = Field(default=None, alias="FileUID")
    h: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="H")
    invalid: Optional[StrictBool] = Field(default=None, alias="Invalid")
    marker_review: Optional[StrictBool] = Field(default=None, alias="MarkerReview")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    src: Optional[StrictStr] = Field(default=None, alias="Src")
    subj_src: Optional[StrictStr] = Field(default=None, alias="SubjSrc")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    w: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="W")
    x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="X")
    y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Y")
    __properties: ClassVar[List[str]] = ["FileUID", "H", "Invalid", "MarkerReview", "Name", "Src", "SubjSrc", "Type", "W", "X", "Y"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormMarker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormMarker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FileUID": obj.get("FileUID"),
            "H": obj.get("H"),
            "Invalid": obj.get("Invalid"),
            "MarkerReview": obj.get("MarkerReview"),
            "Name": obj.get("Name"),
            "Src": obj.get("Src"),
            "SubjSrc": obj.get("SubjSrc"),
            "Type": obj.get("Type"),
            "W": obj.get("W"),
            "X": obj.get("X"),
            "Y": obj.get("Y")
        })
        return _obj


