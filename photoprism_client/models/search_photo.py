# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from photoprism_client.models.entity_file import EntityFile
from photoprism_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class SearchPhoto(BaseModel):
    """
    SearchPhoto
    """ # noqa: E501
    altitude: Optional[StrictInt] = Field(default=None, alias="Altitude")
    camera_id: Optional[StrictInt] = Field(default=None, description="Camera", alias="CameraID")
    camera_make: Optional[StrictStr] = Field(default=None, alias="CameraMake")
    camera_model: Optional[StrictStr] = Field(default=None, alias="CameraModel")
    camera_serial: Optional[StrictStr] = Field(default=None, alias="CameraSerial")
    camera_src: Optional[StrictStr] = Field(default=None, alias="CameraSrc")
    cell_accuracy: Optional[StrictInt] = Field(default=None, alias="CellAccuracy")
    cell_id: Optional[StrictStr] = Field(default=None, description="Cell", alias="CellID")
    checked_at: Optional[StrictStr] = Field(default=None, alias="CheckedAt")
    color: Optional[StrictInt] = Field(default=None, alias="Color")
    country: Optional[StrictStr] = Field(default=None, alias="Country")
    created_at: Optional[StrictStr] = Field(default=None, alias="CreatedAt")
    day: Optional[StrictInt] = Field(default=None, alias="Day")
    deleted_at: Optional[StrictStr] = Field(default=None, alias="DeletedAt")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    document_id: Optional[StrictStr] = Field(default=None, alias="DocumentID")
    duration: Optional[TimeDuration] = Field(default=None, alias="Duration")
    edited_at: Optional[StrictStr] = Field(default=None, alias="EditedAt")
    exposure: Optional[StrictStr] = Field(default=None, alias="Exposure")
    f_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FNumber")
    faces: Optional[StrictInt] = Field(default=None, alias="Faces")
    favorite: Optional[StrictBool] = Field(default=None, alias="Favorite")
    file_name: Optional[StrictStr] = Field(default=None, alias="FileName")
    file_root: Optional[StrictStr] = Field(default=None, alias="FileRoot")
    file_uid: Optional[StrictStr] = Field(default=None, alias="FileUID")
    files: Optional[List[EntityFile]] = Field(default=None, alias="Files")
    focal_length: Optional[StrictInt] = Field(default=None, alias="FocalLength")
    hash: Optional[StrictStr] = Field(default=None, alias="Hash")
    height: Optional[StrictInt] = Field(default=None, alias="Height")
    id: Optional[StrictStr] = Field(default=None, alias="ID")
    instance_id: Optional[StrictStr] = Field(default=None, alias="InstanceID")
    iso: Optional[StrictInt] = Field(default=None, alias="Iso")
    lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Lat")
    lens_id: Optional[StrictInt] = Field(default=None, description="Lens", alias="LensID")
    lens_make: Optional[StrictStr] = Field(default=None, alias="LensMake")
    lens_model: Optional[StrictStr] = Field(default=None, alias="LensModel")
    lng: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Lng")
    merged: Optional[StrictBool] = Field(default=None, alias="Merged")
    month: Optional[StrictInt] = Field(default=None, alias="Month")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    original_name: Optional[StrictStr] = Field(default=None, alias="OriginalName")
    panorama: Optional[StrictBool] = Field(default=None, alias="Panorama")
    path: Optional[StrictStr] = Field(default=None, alias="Path")
    place_city: Optional[StrictStr] = Field(default=None, alias="PlaceCity")
    place_country: Optional[StrictStr] = Field(default=None, alias="PlaceCountry")
    place_id: Optional[StrictStr] = Field(default=None, alias="PlaceID")
    place_label: Optional[StrictStr] = Field(default=None, alias="PlaceLabel")
    place_src: Optional[StrictStr] = Field(default=None, alias="PlaceSrc")
    place_state: Optional[StrictStr] = Field(default=None, alias="PlaceState")
    portrait: Optional[StrictBool] = Field(default=None, alias="Portrait")
    private: Optional[StrictBool] = Field(default=None, alias="Private")
    quality: Optional[StrictInt] = Field(default=None, alias="Quality")
    resolution: Optional[StrictInt] = Field(default=None, alias="Resolution")
    scan: Optional[StrictBool] = Field(default=None, alias="Scan")
    stack: Optional[StrictInt] = Field(default=None, alias="Stack")
    taken_at: Optional[StrictStr] = Field(default=None, alias="TakenAt")
    taken_at_local: Optional[StrictStr] = Field(default=None, alias="TakenAtLocal")
    taken_src: Optional[StrictStr] = Field(default=None, alias="TakenSrc")
    time_zone: Optional[StrictStr] = Field(default=None, alias="TimeZone")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    type_src: Optional[StrictStr] = Field(default=None, alias="TypeSrc")
    uid: Optional[StrictStr] = Field(default=None, alias="UID")
    updated_at: Optional[StrictStr] = Field(default=None, alias="UpdatedAt")
    width: Optional[StrictInt] = Field(default=None, alias="Width")
    year: Optional[StrictInt] = Field(default=None, alias="Year")
    __properties: ClassVar[List[str]] = ["Altitude", "CameraID", "CameraMake", "CameraModel", "CameraSerial", "CameraSrc", "CellAccuracy", "CellID", "CheckedAt", "Color", "Country", "CreatedAt", "Day", "DeletedAt", "Description", "DocumentID", "Duration", "EditedAt", "Exposure", "FNumber", "Faces", "Favorite", "FileName", "FileRoot", "FileUID", "Files", "FocalLength", "Hash", "Height", "ID", "InstanceID", "Iso", "Lat", "LensID", "LensMake", "LensModel", "Lng", "Merged", "Month", "Name", "OriginalName", "Panorama", "Path", "PlaceCity", "PlaceCountry", "PlaceID", "PlaceLabel", "PlaceSrc", "PlaceState", "Portrait", "Private", "Quality", "Resolution", "Scan", "Stack", "TakenAt", "TakenAtLocal", "TakenSrc", "TimeZone", "Title", "Type", "TypeSrc", "UID", "UpdatedAt", "Width", "Year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchPhoto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['Files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchPhoto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Altitude": obj.get("Altitude"),
            "CameraID": obj.get("CameraID"),
            "CameraMake": obj.get("CameraMake"),
            "CameraModel": obj.get("CameraModel"),
            "CameraSerial": obj.get("CameraSerial"),
            "CameraSrc": obj.get("CameraSrc"),
            "CellAccuracy": obj.get("CellAccuracy"),
            "CellID": obj.get("CellID"),
            "CheckedAt": obj.get("CheckedAt"),
            "Color": obj.get("Color"),
            "Country": obj.get("Country"),
            "CreatedAt": obj.get("CreatedAt"),
            "Day": obj.get("Day"),
            "DeletedAt": obj.get("DeletedAt"),
            "Description": obj.get("Description"),
            "DocumentID": obj.get("DocumentID"),
            "Duration": obj.get("Duration"),
            "EditedAt": obj.get("EditedAt"),
            "Exposure": obj.get("Exposure"),
            "FNumber": obj.get("FNumber"),
            "Faces": obj.get("Faces"),
            "Favorite": obj.get("Favorite"),
            "FileName": obj.get("FileName"),
            "FileRoot": obj.get("FileRoot"),
            "FileUID": obj.get("FileUID"),
            "Files": [EntityFile.from_dict(_item) for _item in obj["Files"]] if obj.get("Files") is not None else None,
            "FocalLength": obj.get("FocalLength"),
            "Hash": obj.get("Hash"),
            "Height": obj.get("Height"),
            "ID": obj.get("ID"),
            "InstanceID": obj.get("InstanceID"),
            "Iso": obj.get("Iso"),
            "Lat": obj.get("Lat"),
            "LensID": obj.get("LensID"),
            "LensMake": obj.get("LensMake"),
            "LensModel": obj.get("LensModel"),
            "Lng": obj.get("Lng"),
            "Merged": obj.get("Merged"),
            "Month": obj.get("Month"),
            "Name": obj.get("Name"),
            "OriginalName": obj.get("OriginalName"),
            "Panorama": obj.get("Panorama"),
            "Path": obj.get("Path"),
            "PlaceCity": obj.get("PlaceCity"),
            "PlaceCountry": obj.get("PlaceCountry"),
            "PlaceID": obj.get("PlaceID"),
            "PlaceLabel": obj.get("PlaceLabel"),
            "PlaceSrc": obj.get("PlaceSrc"),
            "PlaceState": obj.get("PlaceState"),
            "Portrait": obj.get("Portrait"),
            "Private": obj.get("Private"),
            "Quality": obj.get("Quality"),
            "Resolution": obj.get("Resolution"),
            "Scan": obj.get("Scan"),
            "Stack": obj.get("Stack"),
            "TakenAt": obj.get("TakenAt"),
            "TakenAtLocal": obj.get("TakenAtLocal"),
            "TakenSrc": obj.get("TakenSrc"),
            "TimeZone": obj.get("TimeZone"),
            "Title": obj.get("Title"),
            "Type": obj.get("Type"),
            "TypeSrc": obj.get("TypeSrc"),
            "UID": obj.get("UID"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "Width": obj.get("Width"),
            "Year": obj.get("Year")
        })
        return _obj


