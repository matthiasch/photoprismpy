# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConfigClientDisable(BaseModel):
    """
    ConfigClientDisable
    """ # noqa: E501
    backups: Optional[StrictBool] = None
    classification: Optional[StrictBool] = None
    darktable: Optional[StrictBool] = None
    exiftool: Optional[StrictBool] = None
    faces: Optional[StrictBool] = None
    ffmpeg: Optional[StrictBool] = None
    heifconvert: Optional[StrictBool] = None
    imagemagick: Optional[StrictBool] = None
    jpegxl: Optional[StrictBool] = None
    places: Optional[StrictBool] = None
    raw: Optional[StrictBool] = None
    rawtherapee: Optional[StrictBool] = None
    restart: Optional[StrictBool] = None
    settings: Optional[StrictBool] = None
    sips: Optional[StrictBool] = None
    tensorflow: Optional[StrictBool] = None
    vectors: Optional[StrictBool] = None
    vips: Optional[StrictBool] = None
    webdav: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["backups", "classification", "darktable", "exiftool", "faces", "ffmpeg", "heifconvert", "imagemagick", "jpegxl", "places", "raw", "rawtherapee", "restart", "settings", "sips", "tensorflow", "vectors", "vips", "webdav"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigClientDisable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigClientDisable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backups": obj.get("backups"),
            "classification": obj.get("classification"),
            "darktable": obj.get("darktable"),
            "exiftool": obj.get("exiftool"),
            "faces": obj.get("faces"),
            "ffmpeg": obj.get("ffmpeg"),
            "heifconvert": obj.get("heifconvert"),
            "imagemagick": obj.get("imagemagick"),
            "jpegxl": obj.get("jpegxl"),
            "places": obj.get("places"),
            "raw": obj.get("raw"),
            "rawtherapee": obj.get("rawtherapee"),
            "restart": obj.get("restart"),
            "settings": obj.get("settings"),
            "sips": obj.get("sips"),
            "tensorflow": obj.get("tensorflow"),
            "vectors": obj.get("vectors"),
            "vips": obj.get("vips"),
            "webdav": obj.get("webdav")
        })
        return _obj


