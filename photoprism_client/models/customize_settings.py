# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from photoprism_client.models.customize_download_settings import CustomizeDownloadSettings
from photoprism_client.models.customize_feature_settings import CustomizeFeatureSettings
from photoprism_client.models.customize_import_settings import CustomizeImportSettings
from photoprism_client.models.customize_index_settings import CustomizeIndexSettings
from photoprism_client.models.customize_maps_settings import CustomizeMapsSettings
from photoprism_client.models.customize_search_settings import CustomizeSearchSettings
from photoprism_client.models.customize_share_settings import CustomizeShareSettings
from photoprism_client.models.customize_stack_settings import CustomizeStackSettings
from photoprism_client.models.customize_template_settings import CustomizeTemplateSettings
from photoprism_client.models.customize_ui_settings import CustomizeUISettings
from typing import Optional, Set
from typing_extensions import Self

class CustomizeSettings(BaseModel):
    """
    CustomizeSettings
    """ # noqa: E501
    download: Optional[CustomizeDownloadSettings] = None
    features: Optional[CustomizeFeatureSettings] = None
    var_import: Optional[CustomizeImportSettings] = Field(default=None, alias="import")
    index: Optional[CustomizeIndexSettings] = None
    maps: Optional[CustomizeMapsSettings] = None
    search: Optional[CustomizeSearchSettings] = None
    share: Optional[CustomizeShareSettings] = None
    stack: Optional[CustomizeStackSettings] = None
    templates: Optional[CustomizeTemplateSettings] = None
    ui: Optional[CustomizeUISettings] = None
    __properties: ClassVar[List[str]] = ["download", "features", "import", "index", "maps", "search", "share", "stack", "templates", "ui"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomizeSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of download
        if self.download:
            _dict['download'] = self.download.to_dict()
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict['features'] = self.features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_import
        if self.var_import:
            _dict['import'] = self.var_import.to_dict()
        # override the default output from pydantic by calling `to_dict()` of index
        if self.index:
            _dict['index'] = self.index.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maps
        if self.maps:
            _dict['maps'] = self.maps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search
        if self.search:
            _dict['search'] = self.search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of share
        if self.share:
            _dict['share'] = self.share.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stack
        if self.stack:
            _dict['stack'] = self.stack.to_dict()
        # override the default output from pydantic by calling `to_dict()` of templates
        if self.templates:
            _dict['templates'] = self.templates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ui
        if self.ui:
            _dict['ui'] = self.ui.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomizeSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "download": CustomizeDownloadSettings.from_dict(obj["download"]) if obj.get("download") is not None else None,
            "features": CustomizeFeatureSettings.from_dict(obj["features"]) if obj.get("features") is not None else None,
            "import": CustomizeImportSettings.from_dict(obj["import"]) if obj.get("import") is not None else None,
            "index": CustomizeIndexSettings.from_dict(obj["index"]) if obj.get("index") is not None else None,
            "maps": CustomizeMapsSettings.from_dict(obj["maps"]) if obj.get("maps") is not None else None,
            "search": CustomizeSearchSettings.from_dict(obj["search"]) if obj.get("search") is not None else None,
            "share": CustomizeShareSettings.from_dict(obj["share"]) if obj.get("share") is not None else None,
            "stack": CustomizeStackSettings.from_dict(obj["stack"]) if obj.get("stack") is not None else None,
            "templates": CustomizeTemplateSettings.from_dict(obj["templates"]) if obj.get("templates") is not None else None,
            "ui": CustomizeUISettings.from_dict(obj["ui"]) if obj.get("ui") is not None else None
        })
        return _obj


