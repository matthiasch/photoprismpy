# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EntityLink(BaseModel):
    """
    EntityLink
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, alias="Comment")
    created_at: Optional[StrictStr] = Field(default=None, alias="CreatedAt")
    created_by: Optional[StrictStr] = Field(default=None, alias="CreatedBy")
    expires: Optional[StrictInt] = Field(default=None, alias="Expires")
    max_views: Optional[StrictInt] = Field(default=None, alias="MaxViews")
    modified_at: Optional[StrictStr] = Field(default=None, alias="ModifiedAt")
    perm: Optional[StrictInt] = Field(default=None, alias="Perm")
    share_uid: Optional[StrictStr] = Field(default=None, alias="ShareUID")
    slug: Optional[StrictStr] = Field(default=None, alias="Slug")
    token: Optional[StrictStr] = Field(default=None, alias="Token")
    uid: Optional[StrictStr] = Field(default=None, alias="UID")
    verify_password: Optional[StrictBool] = Field(default=None, alias="VerifyPassword")
    views: Optional[StrictInt] = Field(default=None, alias="Views")
    __properties: ClassVar[List[str]] = ["Comment", "CreatedAt", "CreatedBy", "Expires", "MaxViews", "ModifiedAt", "Perm", "ShareUID", "Slug", "Token", "UID", "VerifyPassword", "Views"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Comment": obj.get("Comment"),
            "CreatedAt": obj.get("CreatedAt"),
            "CreatedBy": obj.get("CreatedBy"),
            "Expires": obj.get("Expires"),
            "MaxViews": obj.get("MaxViews"),
            "ModifiedAt": obj.get("ModifiedAt"),
            "Perm": obj.get("Perm"),
            "ShareUID": obj.get("ShareUID"),
            "Slug": obj.get("Slug"),
            "Token": obj.get("Token"),
            "UID": obj.get("UID"),
            "VerifyPassword": obj.get("VerifyPassword"),
            "Views": obj.get("Views")
        })
        return _obj


