# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FormService(BaseModel):
    """
    FormService
    """ # noqa: E501
    acc_error: Optional[StrictStr] = Field(default=None, alias="AccError")
    acc_key: Optional[StrictStr] = Field(default=None, alias="AccKey")
    acc_name: Optional[StrictStr] = Field(default=None, alias="AccName")
    acc_owner: Optional[StrictStr] = Field(default=None, alias="AccOwner")
    acc_pass: Optional[StrictStr] = Field(default=None, alias="AccPass")
    acc_share: Optional[StrictBool] = Field(default=None, description="Manual upload enabled, see SharePath, ShareSize, and ShareExpires.", alias="AccShare")
    acc_sync: Optional[StrictBool] = Field(default=None, description="Background sync enabled, see SyncDownload and SyncUpload.", alias="AccSync")
    acc_timeout: Optional[StrictStr] = Field(default=None, description="Request timeout: default, high, medium, low, none", alias="AccTimeout")
    acc_type: Optional[StrictStr] = Field(default=None, alias="AccType")
    acc_url: Optional[StrictStr] = Field(default=None, alias="AccURL")
    acc_user: Optional[StrictStr] = Field(default=None, alias="AccUser")
    retry_limit: Optional[StrictInt] = Field(default=None, description="Maximum number of failed requests.", alias="RetryLimit")
    share_expires: Optional[StrictInt] = Field(default=None, alias="ShareExpires")
    share_path: Optional[StrictStr] = Field(default=None, alias="SharePath")
    share_size: Optional[StrictStr] = Field(default=None, alias="ShareSize")
    sync_download: Optional[StrictBool] = Field(default=None, alias="SyncDownload")
    sync_filenames: Optional[StrictBool] = Field(default=None, alias="SyncFilenames")
    sync_interval: Optional[StrictInt] = Field(default=None, alias="SyncInterval")
    sync_path: Optional[StrictStr] = Field(default=None, alias="SyncPath")
    sync_raw: Optional[StrictBool] = Field(default=None, alias="SyncRaw")
    sync_upload: Optional[StrictBool] = Field(default=None, alias="SyncUpload")
    __properties: ClassVar[List[str]] = ["AccError", "AccKey", "AccName", "AccOwner", "AccPass", "AccShare", "AccSync", "AccTimeout", "AccType", "AccURL", "AccUser", "RetryLimit", "ShareExpires", "SharePath", "ShareSize", "SyncDownload", "SyncFilenames", "SyncInterval", "SyncPath", "SyncRaw", "SyncUpload"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccError": obj.get("AccError"),
            "AccKey": obj.get("AccKey"),
            "AccName": obj.get("AccName"),
            "AccOwner": obj.get("AccOwner"),
            "AccPass": obj.get("AccPass"),
            "AccShare": obj.get("AccShare"),
            "AccSync": obj.get("AccSync"),
            "AccTimeout": obj.get("AccTimeout"),
            "AccType": obj.get("AccType"),
            "AccURL": obj.get("AccURL"),
            "AccUser": obj.get("AccUser"),
            "RetryLimit": obj.get("RetryLimit"),
            "ShareExpires": obj.get("ShareExpires"),
            "SharePath": obj.get("SharePath"),
            "ShareSize": obj.get("ShareSize"),
            "SyncDownload": obj.get("SyncDownload"),
            "SyncFilenames": obj.get("SyncFilenames"),
            "SyncInterval": obj.get("SyncInterval"),
            "SyncPath": obj.get("SyncPath"),
            "SyncRaw": obj.get("SyncRaw"),
            "SyncUpload": obj.get("SyncUpload")
        })
        return _obj


