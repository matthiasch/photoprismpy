# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from photoprism_client.models.config_category_label import ConfigCategoryLabel
from photoprism_client.models.config_client_counts import ConfigClientCounts
from photoprism_client.models.config_client_disable import ConfigClientDisable
from photoprism_client.models.config_client_position import ConfigClientPosition
from photoprism_client.models.config_thumb_size import ConfigThumbSize
from photoprism_client.models.customize_settings import CustomizeSettings
from photoprism_client.models.entity_album import EntityAlbum
from photoprism_client.models.entity_camera import EntityCamera
from photoprism_client.models.entity_country import EntityCountry
from photoprism_client.models.entity_lens import EntityLens
from photoprism_client.models.entity_person import EntityPerson
from photoprism_client.models.env_resources import EnvResources
from typing import Optional, Set
from typing_extensions import Self

class ConfigClientConfig(BaseModel):
    """
    ConfigClientConfig
    """ # noqa: E501
    about: Optional[StrictStr] = None
    acl: Optional[Dict[str, Dict[str, StrictBool]]] = None
    album_categories: Optional[List[StrictStr]] = Field(default=None, alias="albumCategories")
    albums: Optional[List[EntityAlbum]] = None
    api_uri: Optional[StrictStr] = Field(default=None, alias="apiUri")
    app_color: Optional[StrictStr] = Field(default=None, alias="appColor")
    app_icon: Optional[StrictStr] = Field(default=None, alias="appIcon")
    app_mode: Optional[StrictStr] = Field(default=None, alias="appMode")
    app_name: Optional[StrictStr] = Field(default=None, alias="appName")
    auth_mode: Optional[StrictStr] = Field(default=None, alias="authMode")
    base_uri: Optional[StrictStr] = Field(default=None, alias="baseUri")
    cameras: Optional[List[EntityCamera]] = None
    categories: Optional[List[ConfigCategoryLabel]] = None
    clip: Optional[StrictInt] = None
    colors: Optional[List[Dict[str, StrictStr]]] = None
    content_uri: Optional[StrictStr] = Field(default=None, alias="contentUri")
    copyright: Optional[StrictStr] = None
    count: Optional[ConfigClientCounts] = None
    countries: Optional[List[EntityCountry]] = None
    css_uri: Optional[StrictStr] = Field(default=None, alias="cssUri")
    customer: Optional[StrictStr] = None
    debug: Optional[StrictBool] = None
    demo: Optional[StrictBool] = None
    disable: Optional[ConfigClientDisable] = None
    download_token: Optional[StrictStr] = Field(default=None, alias="downloadToken")
    edition: Optional[StrictStr] = None
    experimental: Optional[StrictBool] = None
    ext: Optional[Dict[str, Any]] = None
    flags: Optional[StrictStr] = None
    js_uri: Optional[StrictStr] = Field(default=None, alias="jsUri")
    legal_info: Optional[StrictStr] = Field(default=None, alias="legalInfo")
    legal_url: Optional[StrictStr] = Field(default=None, alias="legalUrl")
    lenses: Optional[List[EntityLens]] = None
    login_uri: Optional[StrictStr] = Field(default=None, alias="loginUri")
    manifest_uri: Optional[StrictStr] = Field(default=None, alias="manifestUri")
    map_key: Optional[StrictStr] = Field(default=None, alias="mapKey")
    membership: Optional[StrictStr] = None
    mode: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    password_length: Optional[StrictInt] = Field(default=None, alias="passwordLength")
    password_reset_uri: Optional[StrictStr] = Field(default=None, alias="passwordResetUri")
    people: Optional[List[EntityPerson]] = None
    pos: Optional[ConfigClientPosition] = None
    preview_token: Optional[StrictStr] = Field(default=None, alias="previewToken")
    public: Optional[StrictBool] = None
    readonly: Optional[StrictBool] = None
    register_uri: Optional[StrictStr] = Field(default=None, alias="registerUri")
    restart: Optional[StrictBool] = None
    server: Optional[EnvResources] = None
    settings: Optional[CustomizeSettings] = None
    site_author: Optional[StrictStr] = Field(default=None, alias="siteAuthor")
    site_caption: Optional[StrictStr] = Field(default=None, alias="siteCaption")
    site_description: Optional[StrictStr] = Field(default=None, alias="siteDescription")
    site_domain: Optional[StrictStr] = Field(default=None, alias="siteDomain")
    site_preview: Optional[StrictStr] = Field(default=None, alias="sitePreview")
    site_title: Optional[StrictStr] = Field(default=None, alias="siteTitle")
    site_url: Optional[StrictStr] = Field(default=None, alias="siteUrl")
    sponsor: Optional[StrictBool] = None
    static_uri: Optional[StrictStr] = Field(default=None, alias="staticUri")
    test: Optional[StrictBool] = None
    thumbs: Optional[List[ConfigThumbSize]] = None
    tier: Optional[StrictInt] = None
    trace: Optional[StrictBool] = None
    upload_nsfw: Optional[StrictBool] = Field(default=None, alias="uploadNSFW")
    users_path: Optional[StrictStr] = Field(default=None, alias="usersPath")
    version: Optional[StrictStr] = None
    video_uri: Optional[StrictStr] = Field(default=None, alias="videoUri")
    wallpaper_uri: Optional[StrictStr] = Field(default=None, alias="wallpaperUri")
    years: Optional[List[StrictInt]] = None
    __properties: ClassVar[List[str]] = ["about", "acl", "albumCategories", "albums", "apiUri", "appColor", "appIcon", "appMode", "appName", "authMode", "baseUri", "cameras", "categories", "clip", "colors", "contentUri", "copyright", "count", "countries", "cssUri", "customer", "debug", "demo", "disable", "downloadToken", "edition", "experimental", "ext", "flags", "jsUri", "legalInfo", "legalUrl", "lenses", "loginUri", "manifestUri", "mapKey", "membership", "mode", "name", "passwordLength", "passwordResetUri", "people", "pos", "previewToken", "public", "readonly", "registerUri", "restart", "server", "settings", "siteAuthor", "siteCaption", "siteDescription", "siteDomain", "sitePreview", "siteTitle", "siteUrl", "sponsor", "staticUri", "test", "thumbs", "tier", "trace", "uploadNSFW", "usersPath", "version", "videoUri", "wallpaperUri", "years"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in albums (list)
        _items = []
        if self.albums:
            for _item_albums in self.albums:
                if _item_albums:
                    _items.append(_item_albums.to_dict())
            _dict['albums'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cameras (list)
        _items = []
        if self.cameras:
            for _item_cameras in self.cameras:
                if _item_cameras:
                    _items.append(_item_cameras.to_dict())
            _dict['cameras'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of count
        if self.count:
            _dict['count'] = self.count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in countries (list)
        _items = []
        if self.countries:
            for _item_countries in self.countries:
                if _item_countries:
                    _items.append(_item_countries.to_dict())
            _dict['countries'] = _items
        # override the default output from pydantic by calling `to_dict()` of disable
        if self.disable:
            _dict['disable'] = self.disable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lenses (list)
        _items = []
        if self.lenses:
            for _item_lenses in self.lenses:
                if _item_lenses:
                    _items.append(_item_lenses.to_dict())
            _dict['lenses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item_people in self.people:
                if _item_people:
                    _items.append(_item_people.to_dict())
            _dict['people'] = _items
        # override the default output from pydantic by calling `to_dict()` of pos
        if self.pos:
            _dict['pos'] = self.pos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in thumbs (list)
        _items = []
        if self.thumbs:
            for _item_thumbs in self.thumbs:
                if _item_thumbs:
                    _items.append(_item_thumbs.to_dict())
            _dict['thumbs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "about": obj.get("about"),
            "acl": obj.get("acl"),
            "albumCategories": obj.get("albumCategories"),
            "albums": [EntityAlbum.from_dict(_item) for _item in obj["albums"]] if obj.get("albums") is not None else None,
            "apiUri": obj.get("apiUri"),
            "appColor": obj.get("appColor"),
            "appIcon": obj.get("appIcon"),
            "appMode": obj.get("appMode"),
            "appName": obj.get("appName"),
            "authMode": obj.get("authMode"),
            "baseUri": obj.get("baseUri"),
            "cameras": [EntityCamera.from_dict(_item) for _item in obj["cameras"]] if obj.get("cameras") is not None else None,
            "categories": [ConfigCategoryLabel.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "clip": obj.get("clip"),
            "colors": obj.get("colors"),
            "contentUri": obj.get("contentUri"),
            "copyright": obj.get("copyright"),
            "count": ConfigClientCounts.from_dict(obj["count"]) if obj.get("count") is not None else None,
            "countries": [EntityCountry.from_dict(_item) for _item in obj["countries"]] if obj.get("countries") is not None else None,
            "cssUri": obj.get("cssUri"),
            "customer": obj.get("customer"),
            "debug": obj.get("debug"),
            "demo": obj.get("demo"),
            "disable": ConfigClientDisable.from_dict(obj["disable"]) if obj.get("disable") is not None else None,
            "downloadToken": obj.get("downloadToken"),
            "edition": obj.get("edition"),
            "experimental": obj.get("experimental"),
            "ext": obj.get("ext"),
            "flags": obj.get("flags"),
            "jsUri": obj.get("jsUri"),
            "legalInfo": obj.get("legalInfo"),
            "legalUrl": obj.get("legalUrl"),
            "lenses": [EntityLens.from_dict(_item) for _item in obj["lenses"]] if obj.get("lenses") is not None else None,
            "loginUri": obj.get("loginUri"),
            "manifestUri": obj.get("manifestUri"),
            "mapKey": obj.get("mapKey"),
            "membership": obj.get("membership"),
            "mode": obj.get("mode"),
            "name": obj.get("name"),
            "passwordLength": obj.get("passwordLength"),
            "passwordResetUri": obj.get("passwordResetUri"),
            "people": [EntityPerson.from_dict(_item) for _item in obj["people"]] if obj.get("people") is not None else None,
            "pos": ConfigClientPosition.from_dict(obj["pos"]) if obj.get("pos") is not None else None,
            "previewToken": obj.get("previewToken"),
            "public": obj.get("public"),
            "readonly": obj.get("readonly"),
            "registerUri": obj.get("registerUri"),
            "restart": obj.get("restart"),
            "server": EnvResources.from_dict(obj["server"]) if obj.get("server") is not None else None,
            "settings": CustomizeSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "siteAuthor": obj.get("siteAuthor"),
            "siteCaption": obj.get("siteCaption"),
            "siteDescription": obj.get("siteDescription"),
            "siteDomain": obj.get("siteDomain"),
            "sitePreview": obj.get("sitePreview"),
            "siteTitle": obj.get("siteTitle"),
            "siteUrl": obj.get("siteUrl"),
            "sponsor": obj.get("sponsor"),
            "staticUri": obj.get("staticUri"),
            "test": obj.get("test"),
            "thumbs": [ConfigThumbSize.from_dict(_item) for _item in obj["thumbs"]] if obj.get("thumbs") is not None else None,
            "tier": obj.get("tier"),
            "trace": obj.get("trace"),
            "uploadNSFW": obj.get("uploadNSFW"),
            "usersPath": obj.get("usersPath"),
            "version": obj.get("version"),
            "videoUri": obj.get("videoUri"),
            "wallpaperUri": obj.get("wallpaperUri"),
            "years": obj.get("years")
        })
        return _obj


