# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from photoprism_client.models.time_duration import TimeDuration
from typing import Optional, Set
from typing_extensions import Self

class EntityFile(BaseModel):
    """
    EntityFile
    """ # noqa: E501
    aspect_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AspectRatio")
    chroma: Optional[StrictInt] = Field(default=None, alias="Chroma")
    codec: Optional[StrictStr] = Field(default=None, alias="Codec")
    color_profile: Optional[StrictStr] = Field(default=None, alias="ColorProfile")
    colors: Optional[StrictStr] = Field(default=None, alias="Colors")
    created_at: Optional[StrictStr] = Field(default=None, alias="CreatedAt")
    created_in: Optional[StrictInt] = Field(default=None, alias="CreatedIn")
    deleted_at: Optional[StrictStr] = Field(default=None, alias="DeletedAt")
    diff: Optional[StrictInt] = Field(default=None, alias="Diff")
    duration: Optional[TimeDuration] = Field(default=None, alias="Duration")
    error: Optional[StrictStr] = Field(default=None, alias="Error")
    fps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FPS")
    file_type: Optional[StrictStr] = Field(default=None, alias="FileType")
    frames: Optional[StrictInt] = Field(default=None, alias="Frames")
    hdr: Optional[StrictBool] = Field(default=None, alias="HDR")
    hash: Optional[StrictStr] = Field(default=None, alias="Hash")
    height: Optional[StrictInt] = Field(default=None, alias="Height")
    instance_id: Optional[StrictStr] = Field(default=None, alias="InstanceID")
    luminance: Optional[StrictStr] = Field(default=None, alias="Luminance")
    main_color: Optional[StrictStr] = Field(default=None, alias="MainColor")
    media_id: Optional[StrictStr] = Field(default=None, alias="MediaID")
    media_type: Optional[StrictStr] = Field(default=None, alias="MediaType")
    media_utc: Optional[StrictInt] = Field(default=None, alias="MediaUTC")
    mime: Optional[StrictStr] = Field(default=None, alias="Mime")
    missing: Optional[StrictBool] = Field(default=None, alias="Missing")
    mod_time: Optional[StrictInt] = Field(default=None, alias="ModTime")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    orientation: Optional[StrictInt] = Field(default=None, alias="Orientation")
    orientation_src: Optional[StrictStr] = Field(default=None, alias="OrientationSrc")
    original_name: Optional[StrictStr] = Field(default=None, alias="OriginalName")
    photo_uid: Optional[StrictStr] = Field(default=None, alias="PhotoUID")
    portrait: Optional[StrictBool] = Field(default=None, alias="Portrait")
    primary: Optional[StrictBool] = Field(default=None, alias="Primary")
    projection: Optional[StrictStr] = Field(default=None, alias="Projection")
    published_at: Optional[StrictStr] = Field(default=None, alias="PublishedAt")
    root: Optional[StrictStr] = Field(default=None, alias="Root")
    sidecar: Optional[StrictBool] = Field(default=None, alias="Sidecar")
    size: Optional[StrictInt] = Field(default=None, alias="Size")
    software: Optional[StrictStr] = Field(default=None, alias="Software")
    taken_at: Optional[StrictStr] = Field(default=None, alias="TakenAt")
    time_index: Optional[StrictStr] = Field(default=None, alias="TimeIndex")
    uid: Optional[StrictStr] = Field(default=None, alias="UID")
    updated_at: Optional[StrictStr] = Field(default=None, alias="UpdatedAt")
    updated_in: Optional[StrictInt] = Field(default=None, alias="UpdatedIn")
    video: Optional[StrictBool] = Field(default=None, alias="Video")
    watermark: Optional[StrictBool] = Field(default=None, alias="Watermark")
    width: Optional[StrictInt] = Field(default=None, alias="Width")
    __properties: ClassVar[List[str]] = ["AspectRatio", "Chroma", "Codec", "ColorProfile", "Colors", "CreatedAt", "CreatedIn", "DeletedAt", "Diff", "Duration", "Error", "FPS", "FileType", "Frames", "HDR", "Hash", "Height", "InstanceID", "Luminance", "MainColor", "MediaID", "MediaType", "MediaUTC", "Mime", "Missing", "ModTime", "Name", "Orientation", "OrientationSrc", "OriginalName", "PhotoUID", "Portrait", "Primary", "Projection", "PublishedAt", "Root", "Sidecar", "Size", "Software", "TakenAt", "TimeIndex", "UID", "UpdatedAt", "UpdatedIn", "Video", "Watermark", "Width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AspectRatio": obj.get("AspectRatio"),
            "Chroma": obj.get("Chroma"),
            "Codec": obj.get("Codec"),
            "ColorProfile": obj.get("ColorProfile"),
            "Colors": obj.get("Colors"),
            "CreatedAt": obj.get("CreatedAt"),
            "CreatedIn": obj.get("CreatedIn"),
            "DeletedAt": obj.get("DeletedAt"),
            "Diff": obj.get("Diff"),
            "Duration": obj.get("Duration"),
            "Error": obj.get("Error"),
            "FPS": obj.get("FPS"),
            "FileType": obj.get("FileType"),
            "Frames": obj.get("Frames"),
            "HDR": obj.get("HDR"),
            "Hash": obj.get("Hash"),
            "Height": obj.get("Height"),
            "InstanceID": obj.get("InstanceID"),
            "Luminance": obj.get("Luminance"),
            "MainColor": obj.get("MainColor"),
            "MediaID": obj.get("MediaID"),
            "MediaType": obj.get("MediaType"),
            "MediaUTC": obj.get("MediaUTC"),
            "Mime": obj.get("Mime"),
            "Missing": obj.get("Missing"),
            "ModTime": obj.get("ModTime"),
            "Name": obj.get("Name"),
            "Orientation": obj.get("Orientation"),
            "OrientationSrc": obj.get("OrientationSrc"),
            "OriginalName": obj.get("OriginalName"),
            "PhotoUID": obj.get("PhotoUID"),
            "Portrait": obj.get("Portrait"),
            "Primary": obj.get("Primary"),
            "Projection": obj.get("Projection"),
            "PublishedAt": obj.get("PublishedAt"),
            "Root": obj.get("Root"),
            "Sidecar": obj.get("Sidecar"),
            "Size": obj.get("Size"),
            "Software": obj.get("Software"),
            "TakenAt": obj.get("TakenAt"),
            "TimeIndex": obj.get("TimeIndex"),
            "UID": obj.get("UID"),
            "UpdatedAt": obj.get("UpdatedAt"),
            "UpdatedIn": obj.get("UpdatedIn"),
            "Video": obj.get("Video"),
            "Watermark": obj.get("Watermark"),
            "Width": obj.get("Width")
        })
        return _obj


