# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from photoprism_client.models.sql_null_time import SqlNullTime
from typing import Optional, Set
from typing_extensions import Self

class EntityService(BaseModel):
    """
    EntityService
    """ # noqa: E501
    acc_error: Optional[StrictStr] = Field(default=None, alias="accError")
    acc_errors: Optional[StrictInt] = Field(default=None, alias="accErrors")
    acc_key: Optional[StrictStr] = Field(default=None, alias="accKey")
    acc_name: Optional[StrictStr] = Field(default=None, alias="accName")
    acc_owner: Optional[StrictStr] = Field(default=None, alias="accOwner")
    acc_pass: Optional[StrictStr] = Field(default=None, alias="accPass")
    acc_share: Optional[StrictBool] = Field(default=None, alias="accShare")
    acc_sync: Optional[StrictBool] = Field(default=None, alias="accSync")
    acc_timeout: Optional[StrictStr] = Field(default=None, alias="accTimeout")
    acc_type: Optional[StrictStr] = Field(default=None, alias="accType")
    acc_url: Optional[StrictStr] = Field(default=None, alias="accURL")
    acc_user: Optional[StrictStr] = Field(default=None, alias="accUser")
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    deleted_at: Optional[StrictStr] = Field(default=None, alias="deletedAt")
    id: Optional[StrictInt] = None
    retry_limit: Optional[StrictInt] = Field(default=None, alias="retryLimit")
    share_expires: Optional[StrictInt] = Field(default=None, alias="shareExpires")
    share_path: Optional[StrictStr] = Field(default=None, alias="sharePath")
    share_size: Optional[StrictStr] = Field(default=None, alias="shareSize")
    sync_date: Optional[SqlNullTime] = Field(default=None, alias="syncDate")
    sync_download: Optional[StrictBool] = Field(default=None, alias="syncDownload")
    sync_filenames: Optional[StrictBool] = Field(default=None, alias="syncFilenames")
    sync_interval: Optional[StrictInt] = Field(default=None, alias="syncInterval")
    sync_path: Optional[StrictStr] = Field(default=None, alias="syncPath")
    sync_raw: Optional[StrictBool] = Field(default=None, alias="syncRaw")
    sync_status: Optional[StrictStr] = Field(default=None, alias="syncStatus")
    sync_upload: Optional[StrictBool] = Field(default=None, alias="syncUpload")
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["accError", "accErrors", "accKey", "accName", "accOwner", "accPass", "accShare", "accSync", "accTimeout", "accType", "accURL", "accUser", "createdAt", "deletedAt", "id", "retryLimit", "shareExpires", "sharePath", "shareSize", "syncDate", "syncDownload", "syncFilenames", "syncInterval", "syncPath", "syncRaw", "syncStatus", "syncUpload", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntityService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sync_date
        if self.sync_date:
            _dict['syncDate'] = self.sync_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntityService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accError": obj.get("accError"),
            "accErrors": obj.get("accErrors"),
            "accKey": obj.get("accKey"),
            "accName": obj.get("accName"),
            "accOwner": obj.get("accOwner"),
            "accPass": obj.get("accPass"),
            "accShare": obj.get("accShare"),
            "accSync": obj.get("accSync"),
            "accTimeout": obj.get("accTimeout"),
            "accType": obj.get("accType"),
            "accURL": obj.get("accURL"),
            "accUser": obj.get("accUser"),
            "createdAt": obj.get("createdAt"),
            "deletedAt": obj.get("deletedAt"),
            "id": obj.get("id"),
            "retryLimit": obj.get("retryLimit"),
            "shareExpires": obj.get("shareExpires"),
            "sharePath": obj.get("sharePath"),
            "shareSize": obj.get("shareSize"),
            "syncDate": SqlNullTime.from_dict(obj["syncDate"]) if obj.get("syncDate") is not None else None,
            "syncDownload": obj.get("syncDownload"),
            "syncFilenames": obj.get("syncFilenames"),
            "syncInterval": obj.get("syncInterval"),
            "syncPath": obj.get("syncPath"),
            "syncRaw": obj.get("syncRaw"),
            "syncStatus": obj.get("syncStatus"),
            "syncUpload": obj.get("syncUpload"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


