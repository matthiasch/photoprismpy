# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from photoprism_client.models.customize_settings import CustomizeSettings

class TestCustomizeSettings(unittest.TestCase):
    """CustomizeSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomizeSettings:
        """Test CustomizeSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomizeSettings`
        """
        model = CustomizeSettings()
        if include_optional:
            return CustomizeSettings(
                download = photoprism_client.models.customize/download_settings.customize.DownloadSettings(
                    disabled = True,
                    media_raw = True,
                    media_sidecar = True,
                    name = 'file',
                    originals = True, ),
                features = photoprism_client.models.customize/feature_settings.customize.FeatureSettings(
                    account = True,
                    albums = True,
                    archive = True,
                    delete = True,
                    download = True,
                    edit = True,
                    estimates = True,
                    favorites = True,
                    files = True,
                    folders = True,
                    import = True,
                    labels = True,
                    library = True,
                    logs = True,
                    moments = True,
                    people = True,
                    places = True,
                    private = True,
                    ratings = True,
                    reactions = True,
                    review = True,
                    search = True,
                    services = True,
                    settings = True,
                    share = True,
                    upload = True,
                    videos = True, ),
                var_import = photoprism_client.models.customize/import_settings.customize.ImportSettings(
                    move = True,
                    path = '', ),
                index = photoprism_client.models.customize/index_settings.customize.IndexSettings(
                    convert = True,
                    path = '',
                    rescan = True,
                    skip_archived = True, ),
                maps = photoprism_client.models.customize/maps_settings.customize.MapsSettings(
                    animate = 56,
                    style = '', ),
                search = photoprism_client.models.customize/search_settings.customize.SearchSettings(
                    batch_size = 56, ),
                share = photoprism_client.models.customize/share_settings.customize.ShareSettings(
                    title = '', ),
                stack = photoprism_client.models.customize/stack_settings.customize.StackSettings(
                    meta = True,
                    name = True,
                    uuid = True, ),
                templates = photoprism_client.models.customize/template_settings.customize.TemplateSettings(
                    default = '', ),
                ui = photoprism_client.models.customize/ui_settings.customize.UISettings(
                    language = '',
                    scrollbar = True,
                    theme = '',
                    time_zone = '',
                    zoom = True, )
            )
        else:
            return CustomizeSettings(
        )
        """

    def testCustomizeSettings(self):
        """Test CustomizeSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
