# coding: utf-8

"""
    PhotoPrism API

    API request bodies and responses are usually JSON-encoded, except for binary data and some of the OAuth2 endpoints. Note that the `Content-Type` header must be set to `application/json` for this, as the request may otherwise fail with error 400. When clients have a valid access token, e.g. obtained through the `POST /api/v1/session` or `POST /api/v1/oauth/token` endpoint, they can use a standard Bearer Authorization header to authenticate their requests. Submitting the access token with a custom `X-Auth-Token` header is supported as well.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from photoprism_client.models.config_options import ConfigOptions

class TestConfigOptions(unittest.TestCase):
    """ConfigOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConfigOptions:
        """Test ConfigOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConfigOptions`
        """
        model = ConfigOptions()
        if include_optional:
            return ConfigOptions(
                app_color = '',
                app_icon = '',
                app_mode = '',
                app_name = '',
                auto_import = 56,
                auto_index = 56,
                backup_albums = True,
                backup_database = True,
                backup_retain = 56,
                backup_schedule = '',
                cdn_url = '',
                cdn_video = True,
                debug = True,
                default_locale = '',
                default_tls = True,
                default_theme = '',
                default_timezone = '',
                detect_nsfw = True,
                disable_backups = True,
                disable_classification = True,
                disable_darktable = True,
                disable_exif_tool = True,
                disable_f_fmpeg = True,
                disable_faces = True,
                disable_heif_convert = True,
                disable_image_magick = True,
                disable_jpeg_xl = True,
                disable_oidc = True,
                disable_places = True,
                disable_raw = True,
                disable_raw_therapee = True,
                disable_sips = True,
                disable_tls = True,
                disable_tensor_flow = True,
                disable_vectors = True,
                disable_vips = True,
                disable_web_dav = True,
                exif_brute_force = True,
                experimental = True,
                f_fmpeg_bitrate = 56,
                f_fmpeg_encoder = '',
                f_fmpeg_map_audio = '',
                f_fmpeg_map_video = '',
                f_fmpeg_size = 56,
                http_cache_max_age = 56,
                http_cache_public = True,
                http_video_max_age = 56,
                https_proxy = '',
                https_proxy_insecure = True,
                index_schedule = '',
                index_workers = 56,
                jpeg_quality = 56,
                jpeg_size = 56,
                legal_info = '',
                legal_url = '',
                oidc_icon = '',
                oidc_provider = '',
                oidc_redirect = True,
                oidc_register = True,
                originals_limit = 56,
                png_size = 56,
                prod = True,
                raw_presets = True,
                read_only = True,
                resolution_limit = 56,
                sidecar_yaml = True,
                site_author = '',
                site_caption = '',
                site_description = '',
                site_preview = '',
                site_title = '',
                site_url = '',
                tls_cert = '',
                tls_email = '',
                tls_key = '',
                test = True,
                thumb_color = '',
                thumb_filter = '',
                thumb_library = '',
                thumb_size = 56,
                thumb_size_uncached = 56,
                thumb_uncached = True,
                trace = True,
                wakeup_interval = -9223372036854775808,
                wallpaper_uri = ''
            )
        else:
            return ConfigOptions(
        )
        """

    def testConfigOptions(self):
        """Test ConfigOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
